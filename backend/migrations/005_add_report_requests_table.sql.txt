-- =============================================================================
-- Migration: Create Report Requests Job Queue Table
-- =============================================================================
--
-- This script creates the `report_requests` table, which serves as a job queue
-- for managing asynchronous report generation from the Amazon Ads API. This
-- is the backbone of the efficient, two-phase data fetching strategy.
--

CREATE TABLE IF NOT EXISTS report_requests (
    id SERIAL PRIMARY KEY,
    report_id TEXT NOT NULL UNIQUE,
    report_type VARCHAR(100) NOT NULL,
    report_date DATE NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, COMPLETED, FAILED, DOWNLOADED
    download_url TEXT,
    failure_reason TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create a function to automatically update the `updated_at` timestamp
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to call the function before any update on the table
DROP TRIGGER IF EXISTS set_timestamp ON report_requests;
CREATE TRIGGER set_timestamp
BEFORE UPDATE ON report_requests
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();


-- Add indexes for faster querying of pending reports and checking for duplicates
CREATE INDEX IF NOT EXISTS idx_report_requests_status ON report_requests(status);
CREATE INDEX IF NOT EXISTS idx_report_requests_report_date ON report_requests(report_date);


-- =============================================================================
-- Grant Permissions to Application User
-- =============================================================================
-- IMPORTANT: Replace 'gadnia' with the actual DB_USER from your .env file.
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE report_requests TO gadnia;
GRANT USAGE, SELECT ON SEQUENCE report_requests_id_seq TO gadnia;