// lambda_deployment_package/process-and-forward-stream.mjs.txt
import zlib from 'zlib';
import { promisify } from 'util';

const gunzip = promisify(zlib.gunzip);
const GZIP_MAGIC_BYTES = [0x1f, 0x8b];

/**
 * AWS Lambda function to process records from Kinesis Firehose.
 * It decompresses the data if gzipped, parses the events,
 * and forwards them to a secure, self-hosted API endpoint.
 */
export const handler = async (event) => {
    console.log(`[START] Received ${event.records.length} raw records from Firehose.`);
    const outputRecords = [];

    for (const record of event.records) {
        try {
            // The data is base64 encoded by Firehose.
            const payload = Buffer.from(record.data, 'base64');
            let dataString;

            // Step 1: Decompress the payload if it's gzipped.
            if (payload[0] === GZIP_MAGIC_BYTES[0] && payload[1] === GZIP_MAGIC_BYTES[1]) {
                const decompressed = await gunzip(payload);
                dataString = decompressed.toString('utf-8');
            } else {
                dataString = payload.toString('utf-8');
            }
            
            // Step 2: Parse the events. A single Firehose record can contain multiple JSON events, separated by newlines.
            const events = dataString.split('\n').filter(Boolean).map(JSON.parse);
            console.log(`[INFO] Parsed ${events.length} event(s) from a single Firehose record.`);

            // Step 3: Forward the events to the self-hosted ingest API.
            const response = await fetch(process.env.INGEST_API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': process.env.INGEST_API_KEY // Use a secret key for authentication.
                },
                body: JSON.stringify(events)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`API Ingest failed with status ${response.status}: ${errorText}`);
            }

            console.log(`[INFO] Successfully forwarded ${events.length} events to the ingest API.`);
            // Return a success status for this record to Firehose.
            outputRecords.push({ recordId: record.recordId, result: 'Ok', data: record.data });

        } catch (error) {
            console.error('[ERROR] Critical error processing a Firehose record:', {
                recordId: record.recordId,
                errorMessage: error.message,
                dataSample: record.data.substring(0, 200) + '...'
            });
            // Return a failure status for this record to Firehose, which will then retry or send to the S3 error bucket.
            outputRecords.push({ recordId: record.recordId, result: 'ProcessingFailed', data: record.data });
        }
    }
    
    console.log(`[END] Processed ${event.records.length} records.`);
    return { records: outputRecords };
};
